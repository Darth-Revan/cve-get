// MIT License
//
// Copyright (c) 2018 Kevin Kirchner
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE

//! This file is part of `cve-get` and defines a custom error type in order to
//! handle all the errors that may be returned from the various libraries used.

use std::result;
use std::fmt;
use std::error::Error as StdError;
use curl;
use serde_json;
use std::str::Utf8Error;

/// Enumeration of various errors
#[derive(Debug)]
pub enum Error {
    /// Error converting data to UTF8 string
    ConversionError(Utf8Error),
    /// Error in serde
    SerdeError(serde_json::Error),
    /// Error in curl
    CurlError(curl::Error),
    /// Error for bad response codes
    BadResponseCode(u32),
    /// Error for invalid arguments
    InvalidArgument(&'static str),
    /// Error when the API does not return data for a search request
    NotExisting,
    /// General error if others do not apply
    GeneralError(&'static str),
}

impl From<curl::Error> for Error {
    fn from(e: curl::Error) -> Self {
        Error::CurlError(e)
    }
}

impl From<Utf8Error> for Error {
    fn from(e: Utf8Error) -> Self {
        Error::ConversionError(e)
    }
}

impl From<serde_json::Error> for Error {
    fn from(e: serde_json::Error) -> Self {
        Error::SerdeError(e)
    }
}

impl fmt::Display for Error {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            Error::ConversionError(_)   => f.write_str("ConversionError"),
            Error::SerdeError(_)        => f.write_str("SerdeError"),
            Error::CurlError(_)         => f.write_str("CurlError"),
            Error::BadResponseCode(ref c)   => write!(f, "BadResponseCode: {}", c),
            Error::InvalidArgument(ref a)   => write!(f, "InvalidArgument: {}", a),
            Error::NotExisting          => f.write_str("NotExisting"),
            Error::GeneralError(_)      => f.write_str("GeneralError"),
        }
    }
}

impl StdError for Error {
    fn description(&self) -> &str {
        match *self {
            Error::ConversionError(_)   => "Failed to convert data to valid UTF8 string",
            Error::SerdeError(_)        => "Failed to deserialize data",
            Error::CurlError(_)         => "An error occured inside libcurl",
            Error::BadResponseCode(_)   => "Received bad response code",
            Error::InvalidArgument(_)   => "Invalid argument provided",
            Error::NotExisting          => "The requested entity or resource does not exist",
            Error::GeneralError(ref e)  => e,
        }
    }

    fn cause(&self) -> Option<&StdError> {
        match *self {
            Error::ConversionError(ref e)   => Some(e),
            Error::SerdeError(ref e)    => Some(e),
            Error::CurlError(ref e)     => Some(e),
            Error::BadResponseCode(_)   => None,
            Error::InvalidArgument(_)   => None,
            Error::NotExisting          => None,
            Error::GeneralError(_)      => None,
        }
    }
}

/// Type alias for a generic result returning the previously defined error type
pub type Result<T> = result::Result<T, Error>;
